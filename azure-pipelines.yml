# Gradle
# Build your Java project and run tests with Gradle using a Gradle wrapper script.
# Add steps that analyze code, save build artifacts, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/java

trigger:
- main

pool: Default
  #vmImage: ubuntu-latest

variables:
  imageName: 'zipkin-perf'
  dockerRegistryServiceConnection: 'acr-for-bluegreen'
  imageRepository: 'zipkin-perf'
  containerRegistry: 'registryforadopoc.azurecr.io'
  tag: 'test'

stages:
- stage: Deploy
  displayName: Deploy stage
  # dependsOn: Build
  jobs:
  - deployment: Deploy
    displayName: Deploy job
    pool: Default
    environment: 'jm-env.bluegreen-test' #customize with your environment
    strategy:
      runOnce:
        deploy:
          steps:
          - task: DownloadPipelineArtifact@2
            inputs:
              artifactName: 'manifests'
              downloadPath: '$(System.ArtifactsDirectory)/manifests'

          - task: KubernetesManifest@0
            displayName: Create imagePullSecret
            inputs:
              action: createSecret
              secretName: $(imagePullSecret)
              namespace: $(k8sNamespace)
              dockerRegistryEndpoint: $(dockerRegistryServiceConnection)

          - task: KubernetesManifest@0
            displayName: Deploy to Kubernetes cluster
            inputs:
              action: deploy
              namespace: $(k8sNamespace)
              manifests: |
                $(System.ArtifactsDirectory)/manifests/deployment.yml
                $(System.ArtifactsDirectory)/manifests/service.yml
              imagePullSecrets: |
                $(imagePullSecret)
              containers: |
                $(containerRegistry)/$(imageRepository):$(tag)